pipeline {
    agent any

	tools {
		nodejs "node"
		gradle "gradle"
		dockerTool "docker"
	}

    environment {
        DOCKER_REGISTRY = "bshello25/blur"
        CLIENT_IMAGE_TAG = "client"
        AUTH_SERVICE_IMAGE_TAG = "auth-service"
        USER_SERVICE_IMAGE_TAG = "user-service"
		SOCKET_SERVICE_IMAGE_TAG = "socket-service"
		DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    }

    stages {

		stage('dockerLogin') {
			steps {
        		sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR -p $DOCKERHUB_CREDENTIALS_PSW'
      		}
		}
		stage('build') {
            parallel {
                stage('client build') {
					when {
						allOf {
							expression {
								currentBuild.result == null || currentBuild.result == 'SUCCESS'
							}
							changeset "FE/**"
						}
					}
					steps {
						dir('FE') {
							sh 'npm install'
							sh 'echo -e "REACT_APP_API_ROOT=\'${REACT_APP_API_ROOT}\'\nREACT_APP_API_ROOT_DONGHO=\'${REACT_APP_API_ROOT_DONGHO}\'\nREACT_APP_SOCIAL_SIGN_API_URL=\'${REACT_APP_SOCIAL_SIGN_API_URL}\'\nREACT_APP_API_ROOT_WONWOONG=\'${REACT_APP_API_ROOT_WONWOONG}\'\nREACT_APP_API_ROOT_SOCKET=\'${REACT_APP_API_ROOT_SOCKET}\'" > .env.production'
							sh 'CI=false npm run build'
							sh 'docker build -t ${DOCKER_REGISTRY}:${CLIENT_IMAGE_TAG} .'
							sh 'docker push ${DOCKER_REGISTRY}:${CLIENT_IMAGE_TAG}'
						}
					}
					post {
						success {
							echo 'client build succeeded'
						}
						failure {
							echo 'client build failed'
						}
					}
        		}

				stage('auth-service build') {
					when {
						allOf {
							expression {
								currentBuild.result == null || currentBuild.result == 'SUCCESS'
							}
							changeset "BE/blur/blur-auth/**"
						}
					}
					steps {
						dir('BE/blur/blur-auth') {
							sh 'chmod +x ./gradlew'
							sh './gradlew clean build'
							sh 'docker build -t ${DOCKER_REGISTRY}:${AUTH_SERVICE_IMAGE_TAG} .'
							sh 'docker push ${DOCKER_REGISTRY}:${AUTH_SERVICE_IMAGE_TAG}'
						}
					}
					post {
						success {
							echo 'auth-service build succeeded'
						}
						failure {
							echo 'auth-service build failed'
						}
					}
				}

				stage('user-service build') {
					when {
						allOf {
							expression {
								currentBuild.result == null || currentBuild.result == 'SUCCESS'
							}
							changeset "BE/blur/blur-user/**"
						}
					}
					steps {
						dir('BE/blur/blur-user') {
							sh 'chmod +x ./gradlew'
							sh './gradlew clean build'
							sh 'docker build -t ${DOCKER_REGISTRY}:${USER_SERVICE_IMAGE_TAG} .'
							sh 'docker push ${DOCKER_REGISTRY}:${USER_SERVICE_IMAGE_TAG}'
						}
					}
					post {
						success {
							echo 'user-service build succeeded'
						}
						failure {
							echo 'user-service build failed'
						}
					}
				}

				stage('socket-service build') {
					when {
						allOf {
							expression {
								currentBuild.result == null || currentBuild.result == 'SUCCESS'
							}
							changeset "BE/blur/blur-socket/**"
						}
					}
					steps {
						dir('socket-service') {
							sh 'npm install'
							// sh 'echo -e "COOKIE_SECRET=\'${COOKIE_SECRET}\'\nCOOKIE_SECRET=\'${COOKIE_SECRET}\'\nMONGO_ID=\'${MONGO_ID}\'\nMONGO_PASSWORD=\'${MONGO_PASSWORD}\'\nREDIS_HOST=\'${REDIS_HOST}\'\nREDIS_PORT=\'${REDIS_PORT}\'\nREDIS_USERNAME=\'${REDIS_USERNAME}\'\nREDIS_PASSWORD=\'${REDIS_PASSWORD}\'" > .env'
							sh 'docker build -t ${DOCKER_REGISTRY}:${SOCKET_SERVICE_IMAGE_TAG} .'
							sh 'docker push ${DOCKER_REGISTRY}:${SOCKET_SERVICE_IMAGE_TAG}'
						}
					}
					post {
						success {
							echo 'socket-service build succeeded'
						}
						failure {
							echo 'socket-service build failed'
						}
					}
				}

			}
        }
        stage('deploy') {
            parallel {
                stage('replace client container') {
                    when {
                    	allOf {
                      		expression {
                        		currentBuild.result == null || currentBuild.result == 'SUCCESS'
                      		}
							changeset "FE/**"
                    	}
                  	}
                    steps {
                        script {
            				sshagent(credentials: ['ssh']) {
								sh """
									if ssh -o StrictHostKeyChecking=no ubuntu@blurblur.kr docker container ls -a | grep -q ${CLIENT_IMAGE_TAG}; then
										ssh -o StrictHostKeyChecking=no ubuntu@blurblur.kr docker container stop ${CLIENT_IMAGE_TAG}
									fi
									ssh -o StrictHostKeyChecking=no ubuntu@blurblur.kr docker run -p 3000:3000 --name ${CLIENT_IMAGE_TAG} --network blur -d --rm ${DOCKER_REGISTRY}:${CLIENT_IMAGE_TAG}
								"""
            				}
        				}
		           	}
                }

                stage('replace auth-service container') {
                    when {
                    	allOf {
                      		expression {
                        		currentBuild.result == null || currentBuild.result == 'SUCCESS'
                      		}
							changeset "BE/blur/blur-auth/**"
                    	}
                  	}
                    steps {
						script {
            				sshagent(credentials: ['ssh']) {
								sh """
									if ssh -o StrictHostKeyChecking=no ubuntu@blurblur.kr docker container ls -a | grep -q ${AUTH_SERVICE_IMAGE_TAG}; then
										ssh -o StrictHostKeyChecking=no ubuntu@blurblur.kr docker container stop ${AUTH_SERVICE_IMAGE_TAG}
									fi
									ssh -o StrictHostKeyChecking=no ubuntu@blurblur.kr docker run -p 8080:8080 --name ${AUTH_SERVICE_IMAGE_TAG} --network blur -d --rm ${DOCKER_REGISTRY}:${AUTH_SERVICE_IMAGE_TAG}
								"""
            				}
        				}
                    }
                }

                stage('replace user-service container') {
                    when {
                    	allOf {
                      		expression {
                        		currentBuild.result == null || currentBuild.result == 'SUCCESS'
                      		}
							changeset "BE/blur/blur-user/**"
                    	}
                  	}
                    steps {
						script {
            				sshagent(credentials: ['ssh']) {
								sh """
									if ssh -o StrictHostKeyChecking=no ubuntu@blurblur.kr docker container ls -a | grep -q ${USER_SERVICE_IMAGE_TAG}; then
										ssh -o StrictHostKeyChecking=no ubuntu@blurblur.kr docker container stop ${USER_SERVICE_IMAGE_TAG}
									fi
									ssh -o StrictHostKeyChecking=no ubuntu@blurblur.kr docker run -p 8081:8081 --name ${USER_SERVICE_IMAGE_TAG} --network blur -d --rm ${DOCKER_REGISTRY}:${USER_SERVICE_IMAGE_TAG}
								"""
            				}
        				}
                    }
                }

				stage('replace socket-service container') {
                    when {
                    	allOf {
                      		expression {
                        		currentBuild.result == null || currentBuild.result == 'SUCCESS'
                      		}
							changeset "BE/blur/blur-socket/**"
                    	}
                  	}
                    steps {
						script {
            				sshagent(credentials: ['ssh']) {
								sh """
									if ssh -o StrictHostKeyChecking=no ubuntu@blurblur.kr docker container ls -a | grep -q ${SOCKET_SERVICE_IMAGE_TAG}; then
										ssh -o StrictHostKeyChecking=no ubuntu@blurblur.kr docker-compose -f docker-compose-socket.yml down --rmi all
									fi
									ssh -o StrictHostKeyChecking=no ubuntu@blurblur.kr docker-compose -f docker-compose-socket.yml up -d
								"""
            				}
        				}
                    }
                }

            }
        }
  	}
}
